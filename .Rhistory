excludeSpecies <- paste(c("racemosa 071119", "racemosa MS", "racemosa SC"), collapse = '|')
excludeOrgans <- paste(c("flowers"), collapse = '|')
# excludeMetabolites <- paste(c(), collapse = '|')
allData <- allData %>%
filter(!grepl(excludeSpecies, species)) %>%
filter(!grepl(excludeOrgans, organ)) #>%>
# filter(!grepl(excludeMetabolites, metabolites))
# Fix naming errors
allData$species <- as.character(allData$species)
allData$species[allData$species=="RNA Seq"] <- "racemosa"
allData$species[allData$species=="havenesis"] <- "havanesis"
allData$species[allData$species=="hastafolia"] <- "hastifolia"
allData$species[allData$species=="havanesis"] <- "havanensis"
allData$species <- as.factor(allData$species)
# Average together any duplicate data points
allData <- allData %>%
group_by(species, organ, metabolite) %>%
summarise(concentration_ppm=mean(concentration_ppm), stError_ppm=mean(stError_ppm))
# Define function to convert units of ppm to micromol/L
ppm2microM <- function(input_ppm, metaboliteName){
if(!is.na(input_ppm)){
if(metaboliteName=="acetoside"){ #PubChem CID: 5281800
output_microM <- (input_ppm/624.6)*1000
}else if(metaboliteName=="apigenin"){ #PubChem CID: 5280443
output_microM <- (input_ppm/270.24)*1000
}else if(metaboliteName=="apigeninG"){ #PubChem CID: 5280704
output_microM <- (input_ppm/432.4)*1000
}else if(metaboliteName=="baicalein"){ #PubChem CID: 5281605
output_microM <- (input_ppm/270.24)*1000
}else if(metaboliteName=="baicalin"){ #PubChem CID: 64982
output_microM <- (input_ppm/446.4)*1000
}else if(metaboliteName=="chrysin"){ #PubChem CID: 5281607
output_microM <- (input_ppm/254.24)*1000
}else if(metaboliteName=="chrysinG"){ #PubChem CID: 90658886
output_microM <- (input_ppm/416.4)*1000
}else if(metaboliteName=="hispidulin"){ #PubChem CID: 5281628
output_microM <- (input_ppm/300.26)*1000
}else if(metaboliteName=="hispidulinG"){ #PubChem CID: 5318083
output_microM <- (input_ppm/462.4)*1000
}else if(metaboliteName=="oroxylinA"){ #PubChem CID: 5320315
output_microM <- (input_ppm/284.26)*1000
}else if(metaboliteName=="oroxyloside"){ #PubChem CID: 14655551
output_microM <- (input_ppm/460.4)*1000
}else if(metaboliteName=="scutellarein"){ #PubChem CID: 5281697
output_microM <- (input_ppm/286.24)*1000
}else if(metaboliteName=="scutellarin"){ #PubChem CID: 185617
output_microM <- (input_ppm/462.4)*1000
}else if(metaboliteName=="wogonin"){ #PubChem CID: 5281703
output_microM <- (input_ppm/284.26)*1000
}else if(metaboliteName=="wogonoside"){ #PubChem CID: 3084961
output_microM <- (input_ppm/460.4)*1000
}else{
print(paste("Error: metabolite name", metaboliteName,  "not recognized"))
output_microM <- NA
}
}else{
output_microM <- NA
}
return(output_microM)
}
View(allData)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(cowplot)
# Load data from .csv files
fresh <- read.csv("C:/Users/Bryce/Documents/scutellariaMetabolites/data/preprocessed/20190813_fresh.csv")[, 2:6]
frozenKR <- read.csv("C:/Users/Bryce/Documents/scutellariaMetabolites/data/preprocessed/20200117_frozenKR.csv")[, 2:6]
# Combine all data into a single data frame and change classifiers (species, organs, metabolites)
# into factors
allData <- rbind(fresh, frozenKR)
allData$species <- as.factor(allData$species)
allData$organ <- as.factor(allData$organ)
allData$metabolite <- as.factor(allData$metabolite)
# Specify any species, organs, or metabolites to exclude, and remove from data frame
excludeSpecies <- paste(c("racemosa 071119", "racemosa MS", "racemosa SC"), collapse = '|')
excludeOrgans <- paste(c("flowers"), collapse = '|')
# excludeMetabolites <- paste(c(), collapse = '|')
allData <- allData %>%
filter(!grepl(excludeSpecies, species)) %>%
filter(!grepl(excludeOrgans, organ)) #>%>
# filter(!grepl(excludeMetabolites, metabolites))
# Fix naming errors
allData$species <- as.character(allData$species)
allData$species[allData$species=="RNA Seq"] <- "racemosa"
allData$species[allData$species=="havenesis"] <- "havanesis"
allData$species[allData$species=="hastafolia"] <- "hastifolia"
allData$species[allData$species=="havanesis"] <- "havanensis"
allData$species <- as.factor(allData$species)
# Average together any duplicate data points
allData <- allData %>%
group_by(species, organ, metabolite) %>%
summarise(concentration_ppm=mean(concentration_ppm), stError_ppm=mean(stError_ppm))
# Define function to convert units of ppm to micromol/L
ppm2microM <- function(input_ppm, metaboliteName){
if(!is.na(input_ppm)){
if(metaboliteName=="acetoside"){ #PubChem CID: 5281800
output_microM <- (input_ppm/624.6)*1000
}else if(metaboliteName=="apigenin"){ #PubChem CID: 5280443
output_microM <- (input_ppm/270.24)*1000
}else if(metaboliteName=="apigeninG"){ #PubChem CID: 5280704
output_microM <- (input_ppm/432.4)*1000
}else if(metaboliteName=="baicalein"){ #PubChem CID: 5281605
output_microM <- (input_ppm/270.24)*1000
}else if(metaboliteName=="baicalin"){ #PubChem CID: 64982
output_microM <- (input_ppm/446.4)*1000
}else if(metaboliteName=="chrysin"){ #PubChem CID: 5281607
output_microM <- (input_ppm/254.24)*1000
}else if(metaboliteName=="chrysinG"){ #PubChem CID: 90658886
output_microM <- (input_ppm/416.4)*1000
}else if(metaboliteName=="hispidulin"){ #PubChem CID: 5281628
output_microM <- (input_ppm/300.26)*1000
}else if(metaboliteName=="hispidulinG"){ #PubChem CID: 5318083
output_microM <- (input_ppm/462.4)*1000
}else if(metaboliteName=="oroxylinA"){ #PubChem CID: 5320315
output_microM <- (input_ppm/284.26)*1000
}else if(metaboliteName=="oroxyloside"){ #PubChem CID: 14655551
output_microM <- (input_ppm/460.4)*1000
}else if(metaboliteName=="scutellarein"){ #PubChem CID: 5281697
output_microM <- (input_ppm/286.24)*1000
}else if(metaboliteName=="scutellarin"){ #PubChem CID: 185617
output_microM <- (input_ppm/462.4)*1000
}else if(metaboliteName=="wogonin"){ #PubChem CID: 5281703
output_microM <- (input_ppm/284.26)*1000
}else if(metaboliteName=="wogonoside"){ #PubChem CID: 3084961
output_microM <- (input_ppm/460.4)*1000
}else{
print(paste("Error: metabolite name", metaboliteName,  "not recognized"))
output_microM <- NA
}
}else{
output_microM <- NA
}
return(output_microM)
}
library(dplyr)
library(ggplot2)
library(ggrepel)
library(cowplot)
# Load data from .csv files
fresh <- read.csv("C:/Users/Bryce/Documents/scutellariaMetabolites/data/preprocessed/20190813_fresh.csv")[, 2:6]
frozenKR <- read.csv("C:/Users/Bryce/Documents/scutellariaMetabolites/data/preprocessed/20200117_frozenKR.csv")[, 2:6]
# Combine all data into a single data frame and change classifiers (species, organs, metabolites)
# into factors
allData <- rbind(fresh, frozenKR)
allData$species <- as.factor(allData$species)
allData$organ <- as.factor(allData$organ)
allData$metabolite <- as.factor(allData$metabolite)
# Specify any species, organs, or metabolites to exclude, and remove from data frame
excludeSpecies <- paste(c("racemosa 071119", "racemosa MS", "racemosa SC"), collapse = '|')
excludeOrgans <- paste(c("flowers"), collapse = '|')
# excludeMetabolites <- paste(c(), collapse = '|')
allData <- allData %>%
filter(!grepl(excludeSpecies, species)) %>%
filter(!grepl(excludeOrgans, organ)) #>%>
# filter(!grepl(excludeMetabolites, metabolites))
# Fix naming errors
allData$species <- as.character(allData$species)
allData$species[allData$species=="RNA Seq"] <- "racemosa"
allData$species[allData$species=="havenesis"] <- "havanesis"
allData$species[allData$species=="hastafolia"] <- "hastifolia"
allData$species[allData$species=="havanesis"] <- "havanensis"
allData$species <- as.factor(allData$species)
View(allData)
allData <- allData %>%
group_by(species, organ, metabolite) %>%
summarise(concentration_ppm=mean(concentration_ppm), stError_ppm=mean(stError_ppm))
library(dplyr)
library(ggplot2)
library(ggrepel)
library(cowplot)
# Load data from .csv files
fresh <- read.csv("C:/Users/Bryce/Documents/scutellariaMetabolites/data/preprocessed/20190813_fresh.csv")[, 2:6]
frozenKR <- read.csv("C:/Users/Bryce/Documents/scutellariaMetabolites/data/preprocessed/20200117_frozenKR.csv")[, 2:6]
# Combine all data into a single data frame and change classifiers (species, organs, metabolites)
# into factors
allData <- rbind(fresh, frozenKR)
allData$species <- as.factor(allData$species)
allData$organ <- as.factor(allData$organ)
allData$metabolite <- as.factor(allData$metabolite)
# Specify any species, organs, or metabolites to exclude, and remove from data frame
excludeSpecies <- paste(c("racemosa 071119", "racemosa MS", "racemosa SC"), collapse = '|')
excludeOrgans <- paste(c("flowers"), collapse = '|')
# excludeMetabolites <- paste(c(), collapse = '|')
allData <- allData %>%
filter(!grepl(excludeSpecies, species)) %>%
filter(!grepl(excludeOrgans, organ)) #>%>
# filter(!grepl(excludeMetabolites, metabolites))
# Fix naming errors
allData$species <- as.character(allData$species)
allData$species[allData$species=="RNA Seq"] <- "racemosa"
allData$species[allData$species=="havenesis"] <- "havanesis"
allData$species[allData$species=="hastafolia"] <- "hastifolia"
allData$species[allData$species=="havanesis"] <- "havanensis"
allData$species <- as.factor(allData$species)
View(allData)
allDataCopy <- allData
allData <- allDataCopy %>%
group_by(species, organ, metabolite) %>%
summarise(concentration_ppm=mean(concentration_ppm), stError_ppm=mean(stError_ppm))
allData <- allDataCopy %>%
group_by(species, organ, metabolite) %>%
summarise(concentration_ppm_copy=mean(concentration_ppm), stError_ppm_copy=mean(stError_ppm))
View(allDataCopy)
View(allData)
library(ggplot2)
library(ggrepel)
library(cowplot)
library(dplyr)
# Load data from .csv files
fresh <- read.csv("C:/Users/Bryce/Documents/scutellariaMetabolites/data/preprocessed/20190813_fresh.csv")[, 2:6]
frozenKR <- read.csv("C:/Users/Bryce/Documents/scutellariaMetabolites/data/preprocessed/20200117_frozenKR.csv")[, 2:6]
# Combine all data into a single data frame and change classifiers (species, organs, metabolites)
# into factors
allData <- rbind(fresh, frozenKR)
allData$species <- as.factor(allData$species)
allData$organ <- as.factor(allData$organ)
allData$metabolite <- as.factor(allData$metabolite)
# Specify any species, organs, or metabolites to exclude, and remove from data frame
excludeSpecies <- paste(c("racemosa 071119", "racemosa MS", "racemosa SC"), collapse = '|')
excludeOrgans <- paste(c("flowers"), collapse = '|')
# excludeMetabolites <- paste(c(), collapse = '|')
allData <- allData %>%
filter(!grepl(excludeSpecies, species)) %>%
filter(!grepl(excludeOrgans, organ)) #>%>
# filter(!grepl(excludeMetabolites, metabolites))
# Fix naming errors
allData$species <- as.character(allData$species)
allData$species[allData$species=="RNA Seq"] <- "racemosa"
allData$species[allData$species=="havenesis"] <- "havanesis"
allData$species[allData$species=="hastafolia"] <- "hastifolia"
allData$species[allData$species=="havanesis"] <- "havanensis"
allData$species <- as.factor(allData$species)
# Average together any duplicate data points
allData <- allData %>%
group_by(species, organ, metabolite) %>%
summarise(concentration_ppm=mean(concentration_ppm), stError_ppm=mean(stError_ppm))
# Define function to convert units of ppm to micromol/L
ppm2microM <- function(input_ppm, metaboliteName){
if(!is.na(input_ppm)){
if(metaboliteName=="acetoside"){ #PubChem CID: 5281800
output_microM <- (input_ppm/624.6)*1000
}else if(metaboliteName=="apigenin"){ #PubChem CID: 5280443
output_microM <- (input_ppm/270.24)*1000
}else if(metaboliteName=="apigeninG"){ #PubChem CID: 5280704
output_microM <- (input_ppm/432.4)*1000
}else if(metaboliteName=="baicalein"){ #PubChem CID: 5281605
output_microM <- (input_ppm/270.24)*1000
}else if(metaboliteName=="baicalin"){ #PubChem CID: 64982
output_microM <- (input_ppm/446.4)*1000
}else if(metaboliteName=="chrysin"){ #PubChem CID: 5281607
output_microM <- (input_ppm/254.24)*1000
}else if(metaboliteName=="chrysinG"){ #PubChem CID: 90658886
output_microM <- (input_ppm/416.4)*1000
}else if(metaboliteName=="hispidulin"){ #PubChem CID: 5281628
output_microM <- (input_ppm/300.26)*1000
}else if(metaboliteName=="hispidulinG"){ #PubChem CID: 5318083
output_microM <- (input_ppm/462.4)*1000
}else if(metaboliteName=="oroxylinA"){ #PubChem CID: 5320315
output_microM <- (input_ppm/284.26)*1000
}else if(metaboliteName=="oroxyloside"){ #PubChem CID: 14655551
output_microM <- (input_ppm/460.4)*1000
}else if(metaboliteName=="scutellarein"){ #PubChem CID: 5281697
output_microM <- (input_ppm/286.24)*1000
}else if(metaboliteName=="scutellarin"){ #PubChem CID: 185617
output_microM <- (input_ppm/462.4)*1000
}else if(metaboliteName=="wogonin"){ #PubChem CID: 5281703
output_microM <- (input_ppm/284.26)*1000
}else if(metaboliteName=="wogonoside"){ #PubChem CID: 3084961
output_microM <- (input_ppm/460.4)*1000
}else{
print(paste("Error: metabolite name", metaboliteName,  "not recognized"))
output_microM <- NA
}
}else{
output_microM <- NA
}
return(output_microM)
}
# Convert concentration and stError from ppm to mM for each data point
concentration_microM <- vector(mode="numeric", length=nrow(allData))
stError_microM <- vector(mode="numeric", length=nrow(allData))
for(i in 1:nrow(allData)){
concentration_microM[i] <- ppm2microM(allData$concentration_ppm[i], allData$metabolite[i])
stError_microM[i] <- ppm2microM(allData$stError_ppm[i], allData$metabolite[i])
}
allData$concentration_microM <- concentration_microM
allData$stError_microM <- stError_microM
source('~/scutellariaMetabolites/code/stackedBarPlots.R')
source('~/scutellariaMetabolites/code/stackedBarPlots.R')
source('~/scutellariaMetabolites/code/stackedBarPlots.R')
source('~/scutellariaMetabolites/code/stackedBarPlots.R')
source('~/scutellariaMetabolites/code/stackedBarPlots.R')
source('~/scutellariaMetabolites/code/stackedBarPlots.R')
source('~/scutellariaMetabolites/code/stackedBarPlots.R')
source('~/scutellariaMetabolites/code/stackedBarPlots.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
herbarium1_30 <- read.csv("C:/Users/Bryce/Documents/scutellariaMetabolites/data/preprocessed/20200214_herbarium1_30.csv")[, 2:6]
View(herbarium1_30)
help(mutate)
View(herbarium1_30)
View(herbarium1_30)
View(herbarium1_30)
herbarium1_30 <- herbarium1_30 %>%
transmute(
species=species,
organ=organ,
metabolite=metabolite,
concentration_ppm=concentration_ppm/2,
stError_ppm=stError_ppm/2
)
View(herbarium1_30)
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
View(heatmapData)
View(speciesDenData)
label(speciesDenData)$label
paste("S.", label(speciesDenData)$label)
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
speciesDenData$label
speciesDenData$label
speciesDenData$label$label
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
speciesDenData$label$label
speciesDenPlot <- ggplot() +
geom_segment(data=segment(speciesDenData), mapping=aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=label(speciesDenData), mapping=aes(x=x, y=y, label=label, hjust=1), nudge_y=6, size=4, fontface="italic") +
coord_flip() +
scale_y_reverse(expand=c(0.3, 0)) +
theme_dendro()
print(speciesDenPlot)
View(speciesDenPlot)
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
print(speciesDenPlot)
print(speciesDendrogram)
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
print(speciesDendrogram)
speciesDendrogram
summary(speciesDendrogram)
View(speciesDendrogram)
print(flavonoidDendogram)
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
speciesDenData$label$label
View(speciesDenData)
speciesDenData$label$label <- paste("S.", label(speciesDenData)$label)
View(speciesDenData)
speciesDenData$labels$label
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/hierarchicalClustering_continuous.R')
source('~/scutellariaMetabolites/code/stackedBarPlots.R')
source('~/scutellariaMetabolites/code/stackedBarPlots.R')
source('~/scutellariaMetabolites/code/stackedBarPlots.R')
source('~/scutellariaMetabolites/code/stackedBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
View(testData)
filter(allData, metabolite=="wogonin")
View(testData)
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
View(testData)
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
help(stat_count)
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
help(pretty)
help(round)
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
help(geom_vline)
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/scutellariaMetabolites/code/pathwayBarPlots.R')
source('~/woundingResponse/code/makeLineGraph.R')
View(icebergData)
View(icebergData)
View(icebergData)
icebergData$treatment[icebergData$treatment=="Melatonin 1000 ppm"] <- "Proprietary Treatment 1000 ppm"
source('~/woundingResponse/code/makeLineGraph.R')
