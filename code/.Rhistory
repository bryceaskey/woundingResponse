theme_bw() +
theme(axis.text=element_text(color="black", size=12),
axis.title=element_text(color="black", size=12))
# Generate scatterplot
ggplot(data=mergedData, mapping=aes(x=rating, y=aStar)) +
geom_point(size=2) +
geom_linerange(mapping=aes(ymin=aStar-aStar_SE, ymax=aStar+aStar_SE)) +
geom_linerange(mapping=aes(xmin=rating-rating_SE, xmax=rating+rating_SE)) +
stat_poly_line(method="lm", se=FALSE, color="black") +
#stat_poly_eq(mapping=aes(label = after_stat(eq.label))) +
stat_poly_eq(size=6) +
labs(x="Pink rib rating (1 - 5 scale)", y="a* value") +
theme_bw() +
theme(axis.text=element_text(color="black", size=12),
axis.title=element_text(color="black", size=12))
# Generate scatterplot
ggplot(data=mergedData, mapping=aes(x=rating, y=aStar)) +
geom_point(size=2) +
geom_linerange(mapping=aes(ymin=aStar-aStar_SE, ymax=aStar+aStar_SE)) +
geom_linerange(mapping=aes(xmin=rating-rating_SE, xmax=rating+rating_SE)) +
stat_poly_line(method="lm", se=FALSE, color="black") +
#stat_poly_eq(mapping=aes(label = after_stat(eq.label))) +
stat_poly_eq(size=4) +
labs(x="Pink rib rating (1 - 5 scale)", y="a* value") +
theme_bw() +
theme(axis.text=element_text(color="black", size=12),
axis.title=element_text(color="black", size=12))
# Generate scatterplot
ggplot(data=mergedData, mapping=aes(x=rating, y=aStar)) +
geom_point(size=2) +
geom_linerange(mapping=aes(ymin=aStar-aStar_SE, ymax=aStar+aStar_SE)) +
geom_linerange(mapping=aes(xmin=rating-rating_SE, xmax=rating+rating_SE)) +
stat_poly_line(method="lm", se=FALSE, color="black") +
#stat_poly_eq(mapping=aes(label = after_stat(eq.label))) +
stat_poly_eq(size=3) +
labs(x="Pink rib rating (1 - 5 scale)", y="a* value") +
theme_bw() +
theme(axis.text=element_text(color="black", size=12),
axis.title=element_text(color="black", size=12))
# Generate scatterplot
ggplot(data=mergedData, mapping=aes(x=rating, y=aStar)) +
geom_point(size=2) +
geom_linerange(mapping=aes(ymin=aStar-aStar_SE, ymax=aStar+aStar_SE)) +
geom_linerange(mapping=aes(xmin=rating-rating_SE, xmax=rating+rating_SE)) +
stat_poly_line(method="lm", se=FALSE, color="black") +
#stat_poly_eq(mapping=aes(label = after_stat(eq.label))) +
stat_poly_eq(size=5) +
labs(x="Pink rib rating (1 - 5 scale)", y="a* value") +
theme_bw() +
theme(axis.text=element_text(color="black", size=12),
axis.title=element_text(color="black", size=12))
help("stat_poly_eq")
# Generate scatterplot
ggplot(data=mergedData, mapping=aes(x=rating, y=aStar)) +
geom_point(size=2) +
geom_linerange(mapping=aes(ymin=aStar-aStar_SE, ymax=aStar+aStar_SE)) +
geom_linerange(mapping=aes(xmin=rating-rating_SE, xmax=rating+rating_SE)) +
stat_poly_line(method="lm", se=FALSE, color="black") +
#stat_poly_eq(mapping=aes(label = after_stat(eq.label))) +
stat_poly_eq(size=4.5) +
labs(x="Pink rib rating (1 - 5 scale)", y="a* value") +
theme_bw() +
theme(axis.text=element_text(color="black", size=12),
axis.title=element_text(color="black", size=12))
ggsave("C:/Users/Bryce/Research/woundingResponse/figures/scatter_errorbar.pdf",
plot=scatter, device=pdf(),
width=5, height=5, units="cm")
# Generate scatterplot
scatter <- ggplot(data=mergedData, mapping=aes(x=rating, y=aStar)) +
geom_point(size=2) +
geom_linerange(mapping=aes(ymin=aStar-aStar_SE, ymax=aStar+aStar_SE)) +
geom_linerange(mapping=aes(xmin=rating-rating_SE, xmax=rating+rating_SE)) +
stat_poly_line(method="lm", se=FALSE, color="black") +
stat_poly_eq(size=4.5) +
labs(x="Pink rib rating (1 - 5 scale)", y="a* value") +
theme_bw() +
theme(axis.text=element_text(color="black", size=12),
axis.title=element_text(color="black", size=12))
ggsave("C:/Users/Bryce/Research/woundingResponse/figures/scatter_errorbar.pdf",
plot=scatter, device=pdf(),
width=5, height=5, units="cm")
ggsave("C:/Users/Bryce/Research/woundingResponse/figures/scatter_errorbar.pdf",
plot=scatter, device=pdf(),
width=10, height=10, units="cm")
# Generate scatterplot
scatter <- ggplot(data=mergedData, mapping=aes(x=rating, y=aStar)) +
geom_point(size=2) +
#geom_linerange(mapping=aes(ymin=aStar-aStar_SE, ymax=aStar+aStar_SE)) +
#geom_linerange(mapping=aes(xmin=rating-rating_SE, xmax=rating+rating_SE)) +
stat_poly_line(method="lm", se=FALSE, color="black") +
stat_poly_eq(size=4.5) +
labs(x="Pink rib rating (1 - 5 scale)", y="a* value") +
theme_bw() +
theme(axis.text=element_text(color="black", size=12),
axis.title=element_text(color="black", size=12))
ggsave("C:/Users/Bryce/Research/woundingResponse/figures/scatter.pdf",
plot=scatter, device=pdf(),
width=10, height=10, units="cm")
# Load necessary packages.
library(OpenImageR)
library(tidyverse)
# Define path to wounding site images.
imagePath <- "C:/Users/Bryce/Research/woundingResponse/bigData/v3/woundingSites/"
# Define function to convert an RGB image into L*a*b* and return its mean a*.
aStar <- function(imagePath){
# Read RGB image into environment
image <- readImage(imagePath)
# Initialize empty vectors to store RGB values.
pixelCount <- sum(image[ , , 4] == 1)
R <- vector(mode="numeric", length=pixelCount)
G <- vector(mode="numeric", length=pixelCount)
B <- vector(mode="numeric", length=pixelCount)
# Create dataframe of RGB values for all pixels in image (ignoring background pixels).
pixelCount <- 1
for(row in 1:nrow(image)){
for(col in 1:ncol(image)){
if(image[row, col, 4] == 1){
R[pixelCount] <- image[row, col, 1]
G[pixelCount] <- image[row, col, 2]
B[pixelCount] <- image[row, col, 3]
pixelCount <- pixelCount + 1
}
}
}
RGBpixels <- data.frame(R, G, B, stringsAsFactors=FALSE)
# Convert all RGB data into L*a*b* color space.
aStar <- vector(mode="numeric", length=nrow(RGBpixels))
for(i in 1:nrow(RGBpixels)){
RGBpixel <- RGBpixels[i, ]
Labpixel <- as.numeric(convertColor(RGBpixel, from="sRGB", to="Lab"))
aStar[i] <- Labpixel[[2]]
}
# Return mean of a*.
return(mean(aStar))
}
# Initialize empty lists to store image data.
variety <- vector(mode="character", length=length(dir(imagePath)))
treatment <- vector(mode="character", length=length(dir(imagePath)))
day <- vector(mode="character", length=length(dir(imagePath)))
rib <- vector(mode="character", length=length(dir(imagePath)))
cutSite <- vector(mode="character", length=length(dir(imagePath)))
aStar <- vector(mode="numeric", length=length(dir(imagePath)))
# Loop through all images in imagePath and store data in lists.
for(i in 1:length(dir(imagePath))){
imageName <- dir(imagePath)[i]
print(paste("Now processing image", imageName))
variety[i] <- strsplit(imageName, "_")[[1]][1]
treatment[i] <- strsplit(imageName, "_")[[1]][2]
day[i] <- strsplit(imageName, "_")[[1]][3]
rib[i] <- strsplit(strsplit(strsplit(imageName, "_")[[1]][4], ".", fixed=TRUE)[[1]][1], "-")[[1]][1]
cutSite[i] <- strsplit(strsplit(strsplit(imageName, "_")[[1]][4], ".", fixed=TRUE)[[1]][1], "-")[[1]][2]
aStar[i] <- aStar(paste(imagePath, "/", imageName, sep=""))
}
# Combine lists into a data frame.
aStarData <- data.frame(variety=variety, treatment=treatment, day=day, rib=rib, cutSite=cutSite, aStar=aStar)
# Load necessary packages.
library(OpenImageR)
library(tidyverse)
# Define path to wounding site images.
imagePath <- "C:/Users/Bryce/Research/woundingResponse/bigData/v3/woundingSites/"
# Define function to convert an RGB image into L*a*b* and return its mean a*.
aStarCalc <- function(imagePath){
# Read RGB image into environment
image <- readImage(imagePath)
# Initialize empty vectors to store RGB values.
pixelCount <- sum(image[ , , 4] == 1)
R <- vector(mode="numeric", length=pixelCount)
G <- vector(mode="numeric", length=pixelCount)
B <- vector(mode="numeric", length=pixelCount)
# Create dataframe of RGB values for all pixels in image (ignoring background pixels).
pixelCount <- 1
for(row in 1:nrow(image)){
for(col in 1:ncol(image)){
if(image[row, col, 4] == 1){
R[pixelCount] <- image[row, col, 1]
G[pixelCount] <- image[row, col, 2]
B[pixelCount] <- image[row, col, 3]
pixelCount <- pixelCount + 1
}
}
}
RGBpixels <- data.frame(R, G, B, stringsAsFactors=FALSE)
# Convert all RGB data into L*a*b* color space.
aStar <- vector(mode="numeric", length=nrow(RGBpixels))
for(i in 1:nrow(RGBpixels)){
RGBpixel <- RGBpixels[i, ]
Labpixel <- as.numeric(convertColor(RGBpixel, from="sRGB", to="Lab"))
aStar[i] <- Labpixel[[2]]
}
# Return mean of a*.
return(mean(aStar))
}
# Initialize empty lists to store image data.
variety <- vector(mode="character", length=length(dir(imagePath)))
treatment <- vector(mode="character", length=length(dir(imagePath)))
day <- vector(mode="character", length=length(dir(imagePath)))
rib <- vector(mode="character", length=length(dir(imagePath)))
cutSite <- vector(mode="character", length=length(dir(imagePath)))
aStar <- vector(mode="numeric", length=length(dir(imagePath)))
# Loop through all images in imagePath and store data in lists.
for(i in 1:length(dir(imagePath))){
imageName <- dir(imagePath)[i]
print(paste("Now processing image", imageName))
variety[i] <- strsplit(imageName, "_")[[1]][1]
treatment[i] <- strsplit(imageName, "_")[[1]][2]
day[i] <- strsplit(imageName, "_")[[1]][3]
rib[i] <- strsplit(strsplit(strsplit(imageName, "_")[[1]][4], ".", fixed=TRUE)[[1]][1], "-")[[1]][1]
cutSite[i] <- strsplit(strsplit(strsplit(imageName, "_")[[1]][4], ".", fixed=TRUE)[[1]][1], "-")[[1]][2]
aStar[i] <- aStar(paste(imagePath, "/", imageName, sep=""))
}
# Combine lists into a data frame.
aStarData <- data.frame(variety=variety, treatment=treatment, day=day, rib=rib, cutSite=cutSite, aStar=aStar)
# Load necessary packages.
library(OpenImageR)
library(tidyverse)
# Define path to wounding site images.
imagePath <- "C:/Users/Bryce/Research/woundingResponse/bigData/v3/woundingSites/"
# Define function to convert an RGB image into L*a*b* and return its mean a*.
aStarCalc <- function(imagePath){
# Read RGB image into environment
image <- readImage(imagePath)
# Initialize empty vectors to store RGB values.
pixelCount <- sum(image[ , , 4] == 1)
R <- vector(mode="numeric", length=pixelCount)
G <- vector(mode="numeric", length=pixelCount)
B <- vector(mode="numeric", length=pixelCount)
# Create dataframe of RGB values for all pixels in image (ignoring background pixels).
pixelCount <- 1
for(row in 1:nrow(image)){
for(col in 1:ncol(image)){
if(image[row, col, 4] == 1){
R[pixelCount] <- image[row, col, 1]
G[pixelCount] <- image[row, col, 2]
B[pixelCount] <- image[row, col, 3]
pixelCount <- pixelCount + 1
}
}
}
RGBpixels <- data.frame(R, G, B, stringsAsFactors=FALSE)
# Convert all RGB data into L*a*b* color space.
aStar <- vector(mode="numeric", length=nrow(RGBpixels))
for(i in 1:nrow(RGBpixels)){
RGBpixel <- RGBpixels[i, ]
Labpixel <- as.numeric(convertColor(RGBpixel, from="sRGB", to="Lab"))
aStar[i] <- Labpixel[[2]]
}
# Return mean of a*.
return(mean(aStar))
}
# Initialize empty lists to store image data.
variety <- vector(mode="character", length=length(dir(imagePath)))
treatment <- vector(mode="character", length=length(dir(imagePath)))
day <- vector(mode="character", length=length(dir(imagePath)))
rib <- vector(mode="character", length=length(dir(imagePath)))
cutSite <- vector(mode="character", length=length(dir(imagePath)))
aStar <- vector(mode="numeric", length=length(dir(imagePath)))
# Loop through all images in imagePath and store data in lists.
for(i in 1:length(dir(imagePath))){
imageName <- dir(imagePath)[i]
print(paste("Now processing image", imageName))
variety[i] <- strsplit(imageName, "_")[[1]][1]
treatment[i] <- strsplit(imageName, "_")[[1]][2]
day[i] <- strsplit(imageName, "_")[[1]][3]
rib[i] <- strsplit(strsplit(strsplit(imageName, "_")[[1]][4], ".", fixed=TRUE)[[1]][1], "-")[[1]][1]
cutSite[i] <- strsplit(strsplit(strsplit(imageName, "_")[[1]][4], ".", fixed=TRUE)[[1]][1], "-")[[1]][2]
aStar[i] <- aStar(paste(imagePath, "/", imageName, sep=""))
}
# Combine lists into a data frame.
aStarData <- data.frame(variety=variety, treatment=treatment, day=day, rib=rib, cutSite=cutSite, aStar=aStar)
# Load necessary packages.
library(OpenImageR)
library(tidyverse)
# Define path to wounding site images.
imagePath <- "C:/Users/Bryce/Research/woundingResponse/bigData/v3/woundingSites/"
# Define function to convert an RGB image into L*a*b* and return its mean a*.
aStarCalc <- function(imagePath){
# Read RGB image into environment
image <- readImage(imagePath)
# Initialize empty vectors to store RGB values.
pixelCount <- sum(image[ , , 4] == 1)
R <- vector(mode="numeric", length=pixelCount)
G <- vector(mode="numeric", length=pixelCount)
B <- vector(mode="numeric", length=pixelCount)
# Create dataframe of RGB values for all pixels in image (ignoring background pixels).
pixelCount <- 1
for(row in 1:nrow(image)){
for(col in 1:ncol(image)){
if(image[row, col, 4] == 1){
R[pixelCount] <- image[row, col, 1]
G[pixelCount] <- image[row, col, 2]
B[pixelCount] <- image[row, col, 3]
pixelCount <- pixelCount + 1
}
}
}
RGBpixels <- data.frame(R, G, B, stringsAsFactors=FALSE)
# Convert all RGB data into L*a*b* color space.
aStar <- vector(mode="numeric", length=nrow(RGBpixels))
for(i in 1:nrow(RGBpixels)){
RGBpixel <- RGBpixels[i, ]
Labpixel <- as.numeric(convertColor(RGBpixel, from="sRGB", to="Lab"))
aStar[i] <- Labpixel[[2]]
}
# Return mean of a*.
return(mean(aStar))
}
# Initialize empty lists to store image data.
variety <- vector(mode="character", length=length(dir(imagePath)))
treatment <- vector(mode="character", length=length(dir(imagePath)))
day <- vector(mode="character", length=length(dir(imagePath)))
rib <- vector(mode="character", length=length(dir(imagePath)))
cutSite <- vector(mode="character", length=length(dir(imagePath)))
aStar <- vector(mode="numeric", length=length(dir(imagePath)))
# Loop through all images in imagePath and store data in lists.
for(i in 1:length(dir(imagePath))){
imageName <- dir(imagePath)[i]
print(paste("Now processing image", imageName))
variety[i] <- strsplit(imageName, "_")[[1]][1]
treatment[i] <- strsplit(imageName, "_")[[1]][2]
day[i] <- strsplit(imageName, "_")[[1]][3]
rib[i] <- strsplit(strsplit(strsplit(imageName, "_")[[1]][4], ".", fixed=TRUE)[[1]][1], "-")[[1]][1]
cutSite[i] <- strsplit(strsplit(strsplit(imageName, "_")[[1]][4], ".", fixed=TRUE)[[1]][1], "-")[[1]][2]
aStar[i] <- aStarCalc(paste(imagePath, "/", imageName, sep=""))
}
# Combine lists into a data frame.
aStarData <- data.frame(variety=variety, treatment=treatment, day=day, rib=rib, cutSite=cutSite, aStar=aStar)
View(aStarData)
# Save data frame as a .csv file.
write.csv(aStarData, file="C:/Users/Bryce/Research/woundingResponse/data/v3/aStarData.csv", row.names=FALSE)
# Load necessary packages.
library(tidyverse)
library(data.table)
library(cowplot)
library(ggpubr)
# Load aStar data from .csv file and set column data types.
allData <- read.csv("C:/Users/Bryce/Research/woundingResponse/data/aStarData.csv")
allData[colnames(allData)[1:5]] <- lapply(allData[colnames(allData)[1:5]], factor)
View(allData)
# Generates line graphs in Fig 1 C & F showing change in mean a*.
# Load necessary packages.
library(tidyverse)
library(data.table)
library(cowplot)
library(ggpubr)
# Load helper functions.
# subsetData - subsets a* data to include only cut sites with comparable initial color.
source("C:/Users/Bryce/Research/woundingResponse/code/helpers/subsetData.R")
# summarizeData - summarizes data for plotting by calculating mean and SE, and performing significance testing.
source("C:/Users/Bryce/Research/woundingResponse/code/helpers/summarizeData.R")
# Load aStar data from .csv file and set column data types.
allData <- read.csv("C:/Users/Bryce/Research/woundingResponse/data/aStarData.csv")
allData[colnames(allData)[1:5]] <- lapply(allData[colnames(allData)[1:5]], factor)
# Subset and prepare iceberg data.
icebergData <- subsetData(allData, "iceberg", -3, 0)
icebergData <- prepareData(icebergData)
icebergData <- summarizeData(icebergData)
# Subset and prepare romaine data.
romaineData <- subsetData(allData, "romaine", -6, -3)
romaineData <- summarizeData(romaineData)
View(icebergData)
# Generates line graphs in Fig 1 C & F showing change in mean a*.
# Load necessary packages.
library(tidyverse)
library(data.table)
library(cowplot)
library(ggpubr)
# Load helper functions.
# subsetData - subsets a* data to include only cut sites with comparable initial color.
source("C:/Users/Bryce/Research/woundingResponse/code/helpers/subsetData.R")
# summarizeData - summarizes data for plotting by calculating mean and SE, and performing significance testing.
source("C:/Users/Bryce/Research/woundingResponse/code/helpers/summarizeData.R")
# Load aStar data from .csv file and set column data types.
allData <- read.csv("C:/Users/Bryce/Research/woundingResponse/data/aStarData.csv")
allData[colnames(allData)[1:5]] <- lapply(allData[colnames(allData)[1:5]], factor)
# Subset and prepare iceberg data.
icebergData <- subsetData(allData, "iceberg", -3, 0)
icebergData <- summarizeData(icebergData)
# Subset and prepare romaine data.
romaineData <- subsetData(allData, "romaine", -6, -3)
romaineData <- summarizeData(romaineData)
# Make line graphs of output data.
# Graph to extract legend from.
legendGraph <- ggplot(data=icebergData, mapping=aes(x=day, y=aStarMeanChange, group=treatment)) +
geom_line(mapping=aes(color=treatment), size=1) +
geom_point(mapping=aes(shape=treatment, color=treatment), size=3) +
scale_shape_manual(values=c(15, 17, 18)) +
scale_color_manual(values=c("#c00000", "#00b251", "#0073c6")) +
theme_bw() +
theme(legend.direction="horizontal",
legend.text=element_text(size=10),
legend.title=element_blank(),
plot.margin=margin(t=1000, unit="pt"))
legend <- get_legend(legendGraph)
# Graph iceberg data.
icebergGraph <- ggplot(data=icebergData, mapping=aes(x=day, y=aStarMeanChange, group=treatment)) +
geom_line(mapping=aes(color=treatment), size=1) +
geom_errorbar(mapping=aes(ymin=aStarMeanChange-SE, ymax=aStarMeanChange+SE), width=0.08, size=0.4) +
geom_point(mapping=aes(shape=treatment, color=treatment), size=3) +
labs(x="Storage time (d)", y="a* change", tag="C") +
ylim(0, 15) +
scale_shape_manual(values=c(15, 17, 18)) +
scale_color_manual(values=c("#c00000", "#00b251", "#0073c6")) +
theme_bw() +
theme(legend.position="none",
axis.title=element_text(size=10),
axis.text=element_text(size=10, color="black"),
axis.ticks=element_blank(),
panel.grid.major.x=element_blank(),
plot.tag=element_text(size=16, face="bold"))
# Graph romaine data.
romaineGraph <- ggplot(data=romaineData, mapping=aes(x=day, y=aStarMeanChange, group=treatment)) +
geom_line(mapping=aes(color=treatment), size=1) +
geom_errorbar(mapping=aes(ymin=aStarMeanChange-SE, ymax=aStarMeanChange+SE), width=0.08, size=0.4) +
geom_point(mapping=aes(shape=treatment, color=treatment), size=3) +
labs(x="Storage time (d)", y="a* change", tag="F") +
ylim(0, 15) +
scale_shape_manual(values=c(15, 17, 18)) +
scale_color_manual(values=c("#c00000", "#00b251", "#0073c6")) +
theme_bw() +
theme(legend.position="none",
axis.title=element_text(size=10),
axis.text=element_text(size=10, color="black"),
axis.ticks=element_blank(),
panel.grid.major.x=element_blank(),
plot.tag=element_text(size=16, face="bold"))
# Combine graphs and legend into final figure.
bothGraphs <- plot_grid(icebergGraph, romaineGraph, nrow=2, ncol=1)
finalFigure <- plot_grid(bothGraphs, legend, nrow=2, rel_heights=c(2, 0.3))
print(finalFigure)
View(icebergData)
ggsave("C:/Users/Bryce/Research/woundingResponse/figures/fig1CF.tif", plot=finalFigure,
device="tiff", width=8, height=15, units="cm", dpi=300)
dev.off()
# Generates scatterplot in Fig S1 comparing a* and visual rating results.
# Load necessary packages.
library(tidyverse)
library(ggpmisc)
# Load helper functions.
# subsetData - subsets a* data to include only cut sites with comparable initial color.
source("C:/Users/Bryce/Research/woundingResponse/code/helpers/subsetData.R")
# summarizeData - summarizes data for plotting by calculating mean and SE, and performing significance testing.
source("C:/Users/Bryce/Research/woundingResponse/code/helpers/summarizeData.R")
# Load aStar data.
allData <- read.csv("C:/Users/Bryce/Research/woundingResponse/data/v3/aStarData.csv")
allData[colnames(allData)[1:5]] <- lapply(allData[colnames(allData)[1:5]], factor)
# Subset and prepare iceberg data.
icebergData <- subsetData(allData, "iceberg", -3, 0)
icebergData <- summarizeData(icebergData)
# Subset and prepare romaine data.
romaineData <- subsetData(allData, "romaine", -6, -3)
romaineData <- summarizeData(romaineData)
# Combine iceberg and romaine data frames, and drop unused columns.
allData <- rbind(icebergData, romaineData)
allData <- allData[, 1:5]
colnames(allData)[4:5] <- c("aStar", "aStar_SE")
# Rename treatment levels to match ratingData.
allData$treatment <- as.character(allData$treatment)
allData$treatment <- gsub(" ", "", tolower(allData$treatment))
allData$treatment <- factor(allData$treatment)
# Load rating data.
ratingData <- read.csv("C:/Users/Bryce/Research/woundingResponse/data/v3/ratingData.csv")
ratingData[colnames(ratingData)[1:3]] <- lapply(ratingData[colnames(ratingData)[1:3]], factor)
colnames(ratingData)[4:5] <- c("rating", "rating_SE")
# Merge aStar and rating data into a single data frame.
mergedData <- merge(allData, ratingData, by=c("variety", "treatment", "day"))
# Generate scatterplot.
scatter <- ggplot(data=mergedData, mapping=aes(x=rating, y=aStar)) +
geom_point(size=2) +
stat_poly_line(method="lm", se=FALSE, color="black") +
stat_poly_eq(use_label(c("R2", "P")), size=4.5, p.digits=5) +
labs(x="Pink rib rating (1 - 5 scale)", y="a* value") +
theme_bw() +
theme(axis.text=element_text(color="black", size=12),
axis.title=element_text(color="black", size=12))
ggsave("C:/Users/Bryce/Research/woundingResponse/figures/figS1.tif", plot=scatter,
device="tiff", width=10, height=10, units="cm", dpi=300)
# Load aStar data.
allData <- read.csv("C:/Users/Bryce/Research/woundingResponse/data/aStarData.csv")
allData[colnames(allData)[1:5]] <- lapply(allData[colnames(allData)[1:5]], factor)
# Subset and prepare iceberg data.
icebergData <- subsetData(allData, "iceberg", -3, 0)
icebergData <- summarizeData(icebergData)
# Subset and prepare romaine data.
romaineData <- subsetData(allData, "romaine", -6, -3)
romaineData <- summarizeData(romaineData)
# Combine iceberg and romaine data frames, and drop unused columns.
allData <- rbind(icebergData, romaineData)
allData <- allData[, 1:5]
colnames(allData)[4:5] <- c("aStar", "aStar_SE")
# Rename treatment levels to match ratingData.
allData$treatment <- as.character(allData$treatment)
allData$treatment <- gsub(" ", "", tolower(allData$treatment))
allData$treatment <- factor(allData$treatment)
# Load rating data.
ratingData <- read.csv("C:/Users/Bryce/Research/woundingResponse/data/v3/ratingData.csv")
# Load rating data.
ratingData <- read.csv("C:/Users/Bryce/Research/woundingResponse/data/ratingData.csv")
ratingData[colnames(ratingData)[1:3]] <- lapply(ratingData[colnames(ratingData)[1:3]], factor)
colnames(ratingData)[4:5] <- c("rating", "rating_SE")
# Merge aStar and rating data into a single data frame.
mergedData <- merge(allData, ratingData, by=c("variety", "treatment", "day"))
# Generate scatterplot.
scatter <- ggplot(data=mergedData, mapping=aes(x=rating, y=aStar)) +
geom_point(size=2) +
stat_poly_line(method="lm", se=FALSE, color="black") +
stat_poly_eq(use_label(c("R2", "P")), size=4.5, p.digits=5) +
labs(x="Pink rib rating (1 - 5 scale)", y="a* value") +
theme_bw() +
theme(axis.text=element_text(color="black", size=12),
axis.title=element_text(color="black", size=12))
ggsave("C:/Users/Bryce/Research/woundingResponse/figures/figS1.tif", plot=scatter,
device="tiff", width=10, height=10, units="cm", dpi=300)
